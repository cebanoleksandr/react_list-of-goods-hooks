{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isAlphabeticaly","setIsAlphabeticaly","isLength","setIsLength","isReverse","setReverse","sortedType","setSortedType","className","type","cn","onClick","Alphabetically","Length","sortType","newGoods","sort","good1","good2","localeCompare","length","reverse","sortGoods","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,iCAAAA,E,mBAAAA,M,KAOE,IAAME,EAAuB,WAClC,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAoCN,mBAA0B,MAA9D,mBAAOO,EAAP,KAAmBC,EAAnB,KAoDA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,YAAaV,IAEfW,QA/BqB,WAC3BV,GAAmB,GACnBE,GAAY,GACZI,EAAcX,EAASgB,iBAuBnB,iCAUA,wBACEH,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAaR,IAEfS,QAnCa,WACnBV,GAAmB,GACnBE,GAAY,GACZI,EAAcX,EAASiB,SA2BnB,4BAUA,wBACEJ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAaN,IAEfO,QAvCa,WACnBN,GAAYD,IAiCR,sBAUEJ,GAAmBE,GAAYE,IAC/B,wBACEK,KAAK,SACLD,UAAU,4BACVG,QA5CI,WACZV,GAAmB,GACnBE,GAAY,GACZE,GAAW,GACXE,EAAc,OAqCR,sBAUJ,6BA9Fc,SAACO,GACjB,IAAIC,EAAkB,UAAOlB,GAE7B,OAAQiB,GACN,KAAKlB,EAASgB,eACZG,EAAWA,EACRC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAE9C,MAEF,KAAKtB,EAASiB,OACZE,EAAWA,EACRC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,UAE/C,MAEF,QACEL,EAAQ,YAAOA,GAOnB,OAJIX,IACFW,EAAWA,EAASM,WAGfN,EAuEFO,CAAUhB,GAAYiB,KAAI,SAAAC,GAAI,OAC7B,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC5HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7d84f6ab.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport React, { useState } from 'react';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetically = 'isAlphabeticaly',\n  Length = 'isLength',\n}\n\ntype Props = {};\n\nexport const App: React.FC<Props> = () => {\n  const [isAlphabeticaly, setIsAlphabeticaly] = useState(false);\n  const [isLength, setIsLength] = useState(false);\n  const [isReverse, setReverse] = useState(false);\n  const [sortedType, setSortedType] = useState<SortType | null>(null);\n\n  const sortGoods = (sortType: string | null): string[] => {\n    let newGoods: string[] = [...goodsFromServer];\n\n    switch (sortType) {\n      case SortType.Alphabetically:\n        newGoods = newGoods\n          .sort((good1, good2) => good1.localeCompare(good2));\n\n        break;\n\n      case SortType.Length:\n        newGoods = newGoods\n          .sort((good1, good2) => good1.length - good2.length);\n\n        break;\n\n      default:\n        newGoods = [...newGoods];\n    }\n\n    if (isReverse) {\n      newGoods = newGoods.reverse();\n    }\n\n    return newGoods;\n  };\n\n  const sortByAlphabetically = (): void => {\n    setIsAlphabeticaly(true);\n    setIsLength(false);\n    setSortedType(SortType.Alphabetically);\n  };\n\n  const sortByLength = (): void => {\n    setIsAlphabeticaly(false);\n    setIsLength(true);\n    setSortedType(SortType.Length);\n  };\n\n  const reverseGoods = (): void => {\n    setReverse(!isReverse);\n  };\n\n  const reset = (): void => {\n    setIsAlphabeticaly(false);\n    setIsLength(false);\n    setReverse(false);\n    setSortedType(null);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': !isAlphabeticaly,\n          })}\n          onClick={sortByAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': !isLength,\n          })}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReverse,\n          })}\n          onClick={reverseGoods}\n        >\n          Reverse\n        </button>\n\n        {(isAlphabeticaly || isLength || isReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortGoods(sortedType).map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}